{"version":3,"sources":["../../server/models/User.js"],"names":["mongoose","require","Schema","validator","jwt","_","bc","UserSchema","email","type","String","required","trim","minlength","unique","validate","value","isEmail","message","password","tokens","access","token","methods","toJSON","user","userObject","toObject","pick","generateAuthToken","sign","_id","toHexString","process","env","JWT_SECRET","toString","push","save","then","statics","findByToken","User","decoded","undefined","verify","e","Promise","reject","findOne","findByCredentials","resolve","compare","err","res","catch","removeToken","update","$pull","pre","next","isModified","genSalt","salt","hash","model","module","exports"],"mappings":"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","file":"User.js","sourcesContent":["const mongoose = require('mongoose');\nconst {Schema} = mongoose;\nconst validator = require('validator');\nconst jwt = require('jsonwebtoken');\nconst _ = require('lodash');\nconst bc = require('bcryptjs');\n\nconst UserSchema = new Schema({\n\temail: {\n\t\ttype: String,\n\t\trequired: true,\n\t\ttrim: true,\n\t\tminlength: 3,\n\t\tunique: true,\n\t\tvalidate: {\n\t\t\tvalidator: value => validator.isEmail(value),\n\t\t\tmessage: '{VALUE} is not valid email'\n\t\t}\n\t},\n\tpassword: {\n\t\ttype: String,\n\t\trequired: true,\n\t\tminlength: 6\n\t},\n\ttokens: [{\n\t\taccess: {\n\t\t\ttype: String,\n\t\t\trequired: true\n\t\t},\n\t\ttoken: {\n\t\t\ttype: String,\n\t\t\trequired: true\n\t\t}\n\t}]\n});\n\nUserSchema.methods.toJSON = function () {\n\tconst user = this;\n\tconst userObject = user.toObject();\n\n\treturn _.pick(userObject, ['_id', 'email']);\n};\n\nUserSchema.methods.generateAuthToken = function () {\n\tconst user = this;\n\tconst access = 'auth';\n\tconst token = jwt.sign({_id: user._id.toHexString(), access}, process.env.JWT_SECRET).toString();\n\n\tuser.tokens.push({access, token});\n\treturn user.save()\n\t.then(() => {\n\t\treturn token;\n\t});\n};\n\nUserSchema.statics.findByToken = function (token) {\n\tconst User = this;\n\tlet decoded = undefined;\n\n\ttry {\n\t\tdecoded = jwt.verify(token, process.env.JWT_SECRET);\n\t} catch (e) {\n\t\treturn Promise.reject();\n\t}\n\n\treturn User.findOne({\n\t\t'_id': decoded._id,\n\t\t'tokens.token': token,\n\t\t'tokens.access': 'auth'\n\t});\n};\n\nUserSchema.statics.findByCredentials = function (email, password) {\n\tconst User = this;\n\n\treturn User.findOne({email})\n\t.then((user) => {\n\t\tif (!user) {\n\t\t\treturn Promise.reject();\n\t\t}\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tbc.compare(password, user.password, (err, res) => {\n\t\t\t\tif (res) {\n\t\t\t\t\tresolve(user);\n\t\t\t\t} else {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t})\n\t.catch(() => {\n\t\treturn Promise.reject();\n\t});\n};\n\nUserSchema.methods.removeToken = function (token) {\n\tconst user = this;\n\n\treturn user.update({\n\t\t$pull: {\n\t\t\ttokens: {token}\n\t\t}\n\t});\n};\n\nUserSchema.pre('save', function (next) {\n\tconst user = this;\n\n\tif (user.isModified('password')) {\n\t\tbc.genSalt(10, (err, salt) => {\n\t\t\tbc.hash(user.password, salt, (err, hash) => {\n\t\t\t\tuser.password = hash;\n\t\t\t\tnext();\n\t\t\t});\n\t\t});\n\t} else {\n\t\tnext();\n\t}\n});\n\nconst User = mongoose.model('User', UserSchema);\n\nmodule.exports = {\n\tUser\n};\n"]}